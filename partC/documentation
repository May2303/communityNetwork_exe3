The RUDP (Reliable User Datagram Protocol) API provided in the code facilitates reliable communication over UDP (User Datagram Protocol) connections.

API:

there are detailed overview of the API components:

    Data Structures:
        RUDP_Header: This structure represents the header of an RUDP packet. It contains the following fields:
            length: Length of the data payload in the packet.
            checksum: Checksum value calculated for the data payload.
            flag: Flag indicating the type of packet (e.g., data, SYN, ACK, FIN).

    Flags:
        RUDP_DATA: This flag is used to indicate a standard data transfer packet.
        RUDP_SYN: Indicates synchronization for connection establishment.
        RUDP_ACK: Represents acknowledgment of received data.
        RUDP_FIN: Indicates the end of the program or connection.

    Functions:
        calculate_checksum: Calculates the one's complement checksum of binary data to ensure data integrity during transmission.
        generate_random_byte: Generates a random byte used for handshake messages during connection establishment.
        rudp_close: Closes the RUDP connection associated with the given socket file descriptor.
        rudp_send: Sends data over the RUDP connection with a custom header, including the specified data, flag, and destination address.
        rudp_recv: Receives data over the RUDP connection with a custom header, verifying checksum and flag fields for reliability.
        rudp_socket_receiver: Sets up an RUDP socket for the receiver (server) side, binds it to a specified port, and performs a handshake with the sender to establish the connection.
        rudp_socket_sender: Sets up an RUDP socket for the sender (client) side, specifies the receiver's address and port, and performs a handshake to establish the connection.

    Constants:
        Header_Size: Specifies the size of the RUDP header in bytes.
        PACKET_SIZE: Defines the maximum size of the packet.
        MAX_RETRIES: Indicates the maximum number of retries for sending a packet before considering the transmission failed.

Sender File:

    The sender file is responsible for sending a randomly generated file to a receiver over a network using RUDP.
    It first validates command-line arguments to ensure the correct usage of the program.
    It generates a random file of a specified size using the generate_random_file function.
    Then, it creates a RUDP socket using the rudp_socket_sender function.
    The main loop of the sender continuously sends data packets from the generated file to the receiver.
    After sending each packet, it waits for an acknowledgment (ACK) from the receiver. If the ACK is not received within a certain timeout period or if an error occurs, the sender resends the packet.
    The sender can prompt the user to decide whether to continue sending more data or not.
    If the user decides not to send more data, the sender sends a termination signal (FIN) to the receiver and closes the connection.


Receiver File:

    The receiver file is responsible for receiving data from a sender using RUDP.
    It validates command-line arguments to ensure the correct usage of the program.
    It creates a RUDP socket using the rudp_socket_receiver function and waits for incoming connections from a sender.
    Once a connection is established, it continuously receives data packets from the sender.
    After receiving each packet, it sends an acknowledgment (ACK) back to the sender.
    If a timeout occurs or an error happens during the data reception process, the receiver handles it accordingly.
    After receiving the entire file, the receiver waits for a decision from the sender whether to continue sending more data or to terminate the connection.
    If the sender decides to terminate the connection, the receiver acknowledges the termination and prints statistics about the data transfer.


In summary, the sender sends data packets to the receiver, which acknowledges each packet it receives. The process continues until the sender decides to terminate the connection. The receiver, on the other hand, continuously receives data packets, sends ACKs, and handles termination signals from the sender. Both sender and receiver ensure reliable data transfer over an unreliable network using the RUDP protocol.
